// Generated by view binder compiler. Do not edit!
package com.example.rendirse.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.rendirse.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ListaPersonasBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView fecha;

  @NonNull
  public final TextView lblFecha;

  @NonNull
  public final TextView lblNombres;

  @NonNull
  public final TextView lblTelefono;

  @NonNull
  public final TextView nombres;

  @NonNull
  public final TextView telefono;

  private ListaPersonasBinding(@NonNull RelativeLayout rootView, @NonNull TextView fecha,
      @NonNull TextView lblFecha, @NonNull TextView lblNombres, @NonNull TextView lblTelefono,
      @NonNull TextView nombres, @NonNull TextView telefono) {
    this.rootView = rootView;
    this.fecha = fecha;
    this.lblFecha = lblFecha;
    this.lblNombres = lblNombres;
    this.lblTelefono = lblTelefono;
    this.nombres = nombres;
    this.telefono = telefono;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ListaPersonasBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ListaPersonasBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.lista_personas, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ListaPersonasBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.fecha;
      TextView fecha = ViewBindings.findChildViewById(rootView, id);
      if (fecha == null) {
        break missingId;
      }

      id = R.id.lblFecha;
      TextView lblFecha = ViewBindings.findChildViewById(rootView, id);
      if (lblFecha == null) {
        break missingId;
      }

      id = R.id.lblNombres;
      TextView lblNombres = ViewBindings.findChildViewById(rootView, id);
      if (lblNombres == null) {
        break missingId;
      }

      id = R.id.lblTelefono;
      TextView lblTelefono = ViewBindings.findChildViewById(rootView, id);
      if (lblTelefono == null) {
        break missingId;
      }

      id = R.id.nombres;
      TextView nombres = ViewBindings.findChildViewById(rootView, id);
      if (nombres == null) {
        break missingId;
      }

      id = R.id.telefono;
      TextView telefono = ViewBindings.findChildViewById(rootView, id);
      if (telefono == null) {
        break missingId;
      }

      return new ListaPersonasBinding((RelativeLayout) rootView, fecha, lblFecha, lblNombres,
          lblTelefono, nombres, telefono);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
